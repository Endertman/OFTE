---
import type { Contact } from '../../types/contact';

interface Props {
  contact: Contact;
}
---

<section class="py-16 sm:py-20">
  <div class="mx-auto max-w-2xl px-4 sm:px-6 lg:max-w-7xl lg:px-8">
    <div class="grid gap-12 lg:grid-cols-2 lg:gap-8">
      <div class="flex flex-col gap-4 sm:gap-6">
        <h2 class="text-3xl font-medium tracking-tight sm:text-4xl">Trabajemos juntos</h2>
        <p class="text-primary-950/70 dark:text-primary-200/70 max-w-lg text-lg sm:text-xl">
          Estamos abiertos a responder tus dudas, recibir tus ideas y sumar a quienes compartan nuestra pasión por la Física.
        </p>
        <p class="text-primary-950/70 dark:text-primary-200/70 max-w-lg text-lg sm:text-xl">
          No importa si eres estudiante, profesor o simplemente un entusiasta: aquí encontrarás un espacio para crecer, colaborar y explorar el fascinante mundo de la Física.
        </p>
      </div>
    
    <div id="notification" class="hidden fixed top-8 left-1/2 -translate-x-1/2 bg-primary dark:bg-gray-900 border border-primary-300 dark:border-primary-700 p-6 rounded-xl shadow-2xl z-50 flex items-center gap-4 min-w-[320px] max-w-[90vw]">
      <div id="notificationIcon"></div>
      <div class="flex-1">
        <p id="notificationMessage" class="text-lg font-semibold"></p>
      </div>
      <button id="closeNotificationBtn" class="text-2xl font-bold text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 px-2" aria-label="Cerrar notificación">&times;</button>
    </div>

      <div id="contactFormContainer">
        <form id="contactForm" class="mt-3 flex flex-col gap-y-6">
        <!-- Full name input -->
        <div>
          <label for="full-name" class="sr-only">Full name</label>
          <input
            type="text"
            name="full-name"
            id="full-name"
            autocomplete="name"
            required
            class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
            placeholder="Nombre"
          />
        </div>

        <!-- Email input -->
        <div>
          <label for="email" class="sr-only">Email</label>
          <input
            type="email"
            name="email"
            id="email"
            required
            autocomplete="email"
            class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
            placeholder="Email"
          />
        </div>

        <!-- Message textarea -->
        <div>
          <label for="message" class="sr-only">Message</label>
          <textarea
            name="message"
            id="message"
            rows="3"
            required
            class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
            placeholder="Mensaje"></textarea>
        </div>
        <div>
          <button
            class="bg-primary-600 dark:bg-primary-400 hover:bg-primary-700 dark:hover:bg-primary-300 focus-visible:outline-primary-600 dark:focus-visible:outline-primary-400 dark:text-primary-950 inline-flex items-center justify-center rounded-full border border-transparent px-5 py-3 text-base font-medium text-white transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
            type="submit"
          >
            Enviar
          </button>
        </div>
      </form>
      </div>
    </div>
  </div>
</section>

<script>
  const form = document.getElementById('contactForm');
  const notification = document.getElementById('notification');
  const notificationMessage = document.getElementById('notificationMessage');
  const notificationIcon = document.getElementById('notificationIcon');
  const closeNotificationBtn = document.getElementById('closeNotificationBtn');
  const cancelBtn = document.getElementById('cancelBtn');

    let notificationTimeout;

  function showNotification(message, isSuccess) {
    notification.classList.remove('hidden');
    notification.classList.remove('bg-red-100', 'text-red-800', 'bg-green-100', 'text-green-800');
    notification.classList.add(
      isSuccess ? 'bg-green-100' : 'bg-red-100',
      isSuccess ? 'text-green-800' : 'text-red-800'
    );
    notificationMessage.textContent = message;
    notificationIcon.innerHTML = isSuccess
      ? `<svg class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>`
      : `<svg class="h-8 w-8 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>`;

    clearTimeout(notificationTimeout);
    notificationTimeout = setTimeout(() => {
      notification.classList.add('hidden');
    }, 5000); // 5 segundos
  }
  
  closeNotificationBtn.addEventListener('click', () => {
    notification.classList.add('hidden');
    clearTimeout(notificationTimeout);
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        showNotification('¡Mensaje enviado con éxito!', true);
        form.reset();
      } else {
        const error = await response.json();
        throw new Error(error.error || 'Error al enviar el mensaje');
      }
    } catch (error) {
      showNotification(
        error instanceof Error ? error.message : 'Hubo un error al enviar el mensaje. Por favor, intenta nuevamente.',
        false
      );
    }
  });

  cancelBtn.addEventListener('click', () => {
    form.reset();
  });

</script>
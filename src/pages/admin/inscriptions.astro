---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Gestionar Inscripciones" description="Panel de administración de inscripciones">
  <section class="py-16 sm:py-20">
    <div class="mx-auto max-w-2xl px-4 sm:px-6 lg:max-w-7xl lg:px-8">
      <div class="flex flex-col gap-12">
        <div>
          <h1 class="text-4xl font-medium tracking-tight sm:text-5xl">Gestionar Inscripciones</h1>
          <p class="mt-4 text-lg text-primary-950/70 dark:text-primary-200/70">
            Ver y gestionar las inscripciones a los seminarios
          </p>
        </div>
        

        <!-- Tabla de inscripciones -->
        <div class="bg-primary-500/10 dark:bg-primary-400/10 rounded-3xl p-8">
          <h2 class="text-2xl font-medium mb-6">Inscripciones</h2>
          <!-- Filtro por seminario -->
          <div class="mb-6 flex items-center gap-4">
            <label for="workshopFilter" class="font-medium">Filtrar por seminario:</label>
            <select id="workshopFilter" class="rounded-lg border px-4 py-2">
              <option value="">Todos</option>
            </select>
          </div>
          <div class="mb-6 flex items-center gap-4">
            <button id="exportExcel" class="bg-primary-600 dark:bg-primary-400 hover:bg-primary-700 dark:hover:bg-primary-300 focus-visible:outline-primary-600 dark:focus-visible:outline-primary-400 dark:text-primary-950 inline-flex items-center justify-center rounded-full border border-transparent px-6 py-3 text-base font-medium text-white transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2">
              Exportar a Excel vista actual
            </button>
          </div>
          <div id="loading" class="text-center py-8">
            <p>Cargando inscripciones...</p>
          </div>
          <div id="inscriptions-container" class="overflow-x-auto" style="display: none;">
            <table class="min-w-full divide-y divide-primary-300 dark:divide-primary-700">
              <thead>
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">Nombre</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">Email</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">Carrera</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">Institución</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">Seminario</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">Estado</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">Acciones</th>
                </tr>
              </thead>
              <tbody id="inscriptions-tbody" class="divide-y divide-primary-300 dark:divide-primary-700">
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  function updateStatus(id: string, status: 'approved' | 'rejected' | 'pending') {
    fetch(`/api/inscriptions/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ status }),
    })
    .then(response => {
      if (response.ok) {
        window.location.reload();
      } else {
        alert('Error al actualizar el estado');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error al actualizar el estado');
    });
  }  
</script>



<script type="module" is:inline>
  import { initializeApp } from "https://esm.sh/firebase/app";
  import { getAuth, onAuthStateChanged } from "https://esm.sh/firebase/auth";
  import { getFirestore, collection, getDocs } from "https://esm.sh/firebase/firestore";
  import * as XLSX from "https://esm.sh/xlsx";

  const firebaseConfig = {
    apiKey: "AIzaSyCgXe4yo_R-KvNblWygDFn3TQ5CIxyyexc",
    authDomain: "ofte-landing-unab.firebaseapp.com",
    projectId: "ofte-landing-unab",
    storageBucket: "ofte-landing-unab.firebasestorage.app",
    messagingSenderId: "76733059112",
    appId: "1:76733059112:web:2e9343a1229d124503a51d",
    measurementId: "G-XVTG14TKMD"
  };

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db = getFirestore(app);

  let allInscriptions = [];
  let uniqueWorkshops = new Set();

  async function loadInscriptions() {
    try {
      const inscriptionsCollection = collection(db, "inscriptions");
      const inscriptionsSnapshot = await getDocs(inscriptionsCollection);
      const inscriptions = inscriptionsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      allInscriptions = inscriptions;
      uniqueWorkshops = new Set(inscriptions.map(i => i.workshopName).filter(Boolean));

      // Rellenar el select de seminarios
      const select = document.getElementById('workshopFilter');
      select.innerHTML = `<option value="">Todos</option>` +
        Array.from(uniqueWorkshops).map(name => `<option value="${name}">${name}</option>`).join('');

      renderTable(inscriptions);

      document.getElementById('loading').style.display = 'none';
      document.getElementById('inscriptions-container').style.display = 'block';
    } catch (error) {
      console.error('Error al obtener inscripciones:', error);
      document.getElementById('loading').innerHTML = '<p class="text-red-600">Error al cargar inscripciones</p>';
    }
  }

  function renderTable(inscriptions) {
    const tbody = document.getElementById('inscriptions-tbody');
    tbody.innerHTML = inscriptions.map(inscription => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap text-sm">${inscription.name || ''}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm">${inscription.email || ''}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm">${inscription.degree || ''}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm">${inscription.institution || ''}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm">${inscription.workshopName || ''}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm">
          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
            inscription.status === 'approved' ? 'bg-green-100 text-green-800' : 
            inscription.status === 'rejected' ? 'bg-red-100 text-red-800' : 
            'bg-yellow-100 text-yellow-800'
          }">
            ${inscription.status === 'approved' ? 'Aprobado' : 
              inscription.status === 'rejected' ? 'Rechazado' : 
              'Pendiente'}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm">
          <button
            class="text-primary-600 dark:text-primary-400 hover:text-primary-900 dark:hover:text-primary-300"
            onclick="updateStatus('${inscription.id}', 'approved')"
          >
            Aprobar
          </button>
          <button
            class="ml-4 text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
            onclick="updateStatus('${inscription.id}', 'rejected')"
          >
            Rechazar
          </button>
        </td>
      </tr>
    `).join('');
  }

  document.getElementById('workshopFilter').addEventListener('change', (e) => {
    const value = e.target.value;
    if (!value) {
      renderTable(allInscriptions);
    } else {
      renderTable(allInscriptions.filter(i => i.workshopName === value));
    }
  });

  document.getElementById('exportExcel').addEventListener('click', () => {
    // Usa el filtro actual
    const selectedWorkshop = document.getElementById('workshopFilter').value;
    const inscriptionsToExport = !selectedWorkshop
      ? allInscriptions
      : allInscriptions.filter(i => i.workshopName === selectedWorkshop);

    // Prepara los datos para Excel
    const data = inscriptionsToExport.map(i => ({
      Nombre: i.name || '',
      Email: i.email || '',
      Carrera: i.degree || '',
      Institución: i.institution || '',
      Seminario: i.workshopName || '',
      Estado: i.status || '',
    }));

    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Inscripciones");
    XLSX.writeFile(workbook, "inscripciones.xlsx");
  });

  onAuthStateChanged(auth, (user) => {
    if (!user) {
      window.location.href = "/admin/login";
    } else {
      loadInscriptions();
    }
  });
</script>